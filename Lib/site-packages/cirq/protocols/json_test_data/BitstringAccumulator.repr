cirq.work.BitstringAccumulator(meas_spec=cirq.work._MeasurementSpec(max_setting=cirq.work.InitObsSetting(init_state=cirq.ProductState({cirq.LineQubit(0): cirq.Z.basis[+1], cirq.LineQubit(1): cirq.Z.basis[+1]}), observable=(cirq.X(cirq.LineQubit(0))*cirq.Y(cirq.LineQubit(1)))), circuit_params={'beta': 0.123, 'gamma': 0.456}), simul_settings=[cirq.work.InitObsSetting(init_state=cirq.ProductState({cirq.LineQubit(0): cirq.Z.basis[+1], cirq.LineQubit(1): cirq.Z.basis[+1]}), observable=(cirq.X(cirq.LineQubit(0))*cirq.Y(cirq.LineQubit(1)))), cirq.work.InitObsSetting(init_state=cirq.ProductState({cirq.LineQubit(0): cirq.Z.basis[+1], cirq.LineQubit(1): cirq.Z.basis[+1]}), observable=cirq.X(cirq.LineQubit(0))), cirq.work.InitObsSetting(init_state=cirq.ProductState({cirq.LineQubit(0): cirq.Z.basis[+1], cirq.LineQubit(1): cirq.Z.basis[+1]}), observable=cirq.Y(cirq.LineQubit(1)))], qubit_to_index={cirq.LineQubit(0): 0, cirq.LineQubit(1): 1}, bitstrings=np.array([[0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [0, 1], [1, 0], [1, 1]], dtype=np.dtype('uint8')), chunksizes=np.array([4, 4], dtype=np.dtype('int64')), timestamps=np.array([datetime.datetime(2020, 12, 8, 18, 20, 59, 74444), datetime.datetime(2020, 12, 8, 18, 20, 59, 74490)], dtype=np.dtype('<M8[us]')))